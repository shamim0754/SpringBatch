<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation=
		"http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	">
	<import resource="../config/application-context.xml" />
	<bean id="domain" class="com.javaaround.Domain" />

	<bean id="fileDeletingTasklet" class="com.javaaround.tasklet.FileDeletingTasklet" >
		<property name="directory" value="file:outputs/" />
	</bean>

	<job id="helloWorldJob" xmlns="http://www.springframework.org/schema/batch">
		<step id="deleteDir"  next="step1">
	    	<tasklet ref="fileDeletingTasklet" />
		</step>
		<step id="step1" next="step2">
			<tasklet>
				<chunk reader="multiResourceReader" writer="xmlItemWriter"
					commit-interval="1" />
			</tasklet>
		</step>
		<step id="step2">
			<tasklet>
				<chunk reader="itemReader" writer="flatFileItemWriter"
					commit-interval="1" />
			</tasklet>
		</step>
	</job>

	<bean id="multiResourceReader"
		class=" org.springframework.batch.item.file.MultiResourceItemReader">
		<property name="resources" value="file:inputs/domain-*.csv" />
		<property name="delegate" ref="flatFileItemReader" />
	</bean>

	<bean id="flatFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">

		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">

				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="id, domain" />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean
						class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
						<property name="prototypeBeanName" value="domain" />
					</bean>
				</property>
			</bean>
		</property>

	</bean>

	 <bean id="flatFileItemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter">

		<property name="resource" value="file:inputs/domain.all.csv" />
		<property name="appendAllowed" value="false" />
		<property name="lineAggregator">
			<bean
				class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
				<property name="delimiter" value="," />
				<property name="fieldExtractor">
					<bean
						class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
						<property name="names" value="id, domain" />
					</bean>
				</property>
			</bean>
		</property>

	</bean>
	<bean id="mysqlItemWriter"
	class="org.springframework.batch.item.database.JdbcBatchItemWriter">
	<property name="dataSource" ref="dataSource" />
	<property name="sql">
	  <value>
            <![CDATA[
            	insert into domain(id,name) values (:id, :domain)
            ]]>
	  </value>
	</property>
	<!-- It will take care matching between object property and sql name parameter -->
	<property name="itemSqlParameterSourceProvider">
		<bean
		class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
	</property>
  </bean>

  <!-- XML ItemWriter which writes the data in XML format -->
    <bean id="xmlItemWriter" class="org.springframework.batch.item.xml.StaxEventItemWriter">
 
        <property name="resource" value="file:outputs/domain.xml" />
 
        <property name="rootTagName" value="domains" />
 
        <property name="marshaller">
 
            <bean class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
                <property name="classesToBeBound">
                    <list>
                        <value>com.javaaround.Domain</value>
                    </list>
                </property>
            </bean>
 
        </property>
 
    </bean>
    <bean id="xmlItemReader" class="org.springframework.batch.item.xml.StaxEventItemReader">
 		<property name="fragmentRootElementName" value="domain" />
        <property name="resource" value="file:outputs/domain.xml" />
        <property name="unmarshaller">
            <bean class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
                <property name="classesToBeBound">
                    <list>
                        <value>com.javaaround.Domain</value>
                    </list>
                </property>
            </bean>
 
        </property>
 
    </bean>
    <bean id="itemReader"
		class="org.springframework.batch.item.database.JdbcCursorItemReader"
		scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="sql"
			value="select id, name from domain" />
		<property name="rowMapper">
			<bean class="com.javaaround.rowmapper.DomainRowMapper" />
		</property>
  </bean>
</beans>	